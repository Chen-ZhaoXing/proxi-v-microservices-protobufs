// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: recipe.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecipeService_GetAllRecipes_FullMethodName = "/SGCooks.Recipe.RecipeService/GetAllRecipes"
	RecipeService_GetRecipeById_FullMethodName = "/SGCooks.Recipe.RecipeService/GetRecipeById"
	RecipeService_AddRecipe_FullMethodName     = "/SGCooks.Recipe.RecipeService/AddRecipe"
	RecipeService_UpdateRecipe_FullMethodName  = "/SGCooks.Recipe.RecipeService/UpdateRecipe"
	RecipeService_DeleteRecipe_FullMethodName  = "/SGCooks.Recipe.RecipeService/DeleteRecipe"
	RecipeService_UpdateStock_FullMethodName   = "/SGCooks.Recipe.RecipeService/UpdateStock"
)

// RecipeServiceClient is the client API for RecipeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipeServiceClient interface {
	GetAllRecipes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecipeListResponse, error)
	GetRecipeById(ctx context.Context, in *RecipeIdRequest, opts ...grpc.CallOption) (*RecipeResponse, error)
	AddRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*RecipeResponse, error)
	UpdateRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*RecipeResponse, error)
	DeleteRecipe(ctx context.Context, in *RecipeIdRequest, opts ...grpc.CallOption) (*DeleteRecipeResponse, error)
	UpdateStock(ctx context.Context, in *RecipeStockUpdateRequest, opts ...grpc.CallOption) (*RecipeResponse, error)
}

type recipeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeServiceClient(cc grpc.ClientConnInterface) RecipeServiceClient {
	return &recipeServiceClient{cc}
}

func (c *recipeServiceClient) GetAllRecipes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecipeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeListResponse)
	err := c.cc.Invoke(ctx, RecipeService_GetAllRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) GetRecipeById(ctx context.Context, in *RecipeIdRequest, opts ...grpc.CallOption) (*RecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeResponse)
	err := c.cc.Invoke(ctx, RecipeService_GetRecipeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) AddRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*RecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeResponse)
	err := c.cc.Invoke(ctx, RecipeService_AddRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) UpdateRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*RecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeResponse)
	err := c.cc.Invoke(ctx, RecipeService_UpdateRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) DeleteRecipe(ctx context.Context, in *RecipeIdRequest, opts ...grpc.CallOption) (*DeleteRecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRecipeResponse)
	err := c.cc.Invoke(ctx, RecipeService_DeleteRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) UpdateStock(ctx context.Context, in *RecipeStockUpdateRequest, opts ...grpc.CallOption) (*RecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeResponse)
	err := c.cc.Invoke(ctx, RecipeService_UpdateStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeServiceServer is the server API for RecipeService service.
// All implementations must embed UnimplementedRecipeServiceServer
// for forward compatibility.
type RecipeServiceServer interface {
	GetAllRecipes(context.Context, *Empty) (*RecipeListResponse, error)
	GetRecipeById(context.Context, *RecipeIdRequest) (*RecipeResponse, error)
	AddRecipe(context.Context, *Recipe) (*RecipeResponse, error)
	UpdateRecipe(context.Context, *Recipe) (*RecipeResponse, error)
	DeleteRecipe(context.Context, *RecipeIdRequest) (*DeleteRecipeResponse, error)
	UpdateStock(context.Context, *RecipeStockUpdateRequest) (*RecipeResponse, error)
	mustEmbedUnimplementedRecipeServiceServer()
}

// UnimplementedRecipeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecipeServiceServer struct{}

func (UnimplementedRecipeServiceServer) GetAllRecipes(context.Context, *Empty) (*RecipeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecipes not implemented")
}
func (UnimplementedRecipeServiceServer) GetRecipeById(context.Context, *RecipeIdRequest) (*RecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeById not implemented")
}
func (UnimplementedRecipeServiceServer) AddRecipe(context.Context, *Recipe) (*RecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecipe not implemented")
}
func (UnimplementedRecipeServiceServer) UpdateRecipe(context.Context, *Recipe) (*RecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipe not implemented")
}
func (UnimplementedRecipeServiceServer) DeleteRecipe(context.Context, *RecipeIdRequest) (*DeleteRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipe not implemented")
}
func (UnimplementedRecipeServiceServer) UpdateStock(context.Context, *RecipeStockUpdateRequest) (*RecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedRecipeServiceServer) mustEmbedUnimplementedRecipeServiceServer() {}
func (UnimplementedRecipeServiceServer) testEmbeddedByValue()                       {}

// UnsafeRecipeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipeServiceServer will
// result in compilation errors.
type UnsafeRecipeServiceServer interface {
	mustEmbedUnimplementedRecipeServiceServer()
}

func RegisterRecipeServiceServer(s grpc.ServiceRegistrar, srv RecipeServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecipeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecipeService_ServiceDesc, srv)
}

func _RecipeService_GetAllRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).GetAllRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_GetAllRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).GetAllRecipes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_GetRecipeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).GetRecipeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_GetRecipeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).GetRecipeById(ctx, req.(*RecipeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_AddRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recipe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).AddRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_AddRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).AddRecipe(ctx, req.(*Recipe))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_UpdateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recipe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).UpdateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_UpdateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).UpdateRecipe(ctx, req.(*Recipe))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_DeleteRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).DeleteRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_DeleteRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).DeleteRecipe(ctx, req.(*RecipeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeStockUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_UpdateStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).UpdateStock(ctx, req.(*RecipeStockUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecipeService_ServiceDesc is the grpc.ServiceDesc for RecipeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecipeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SGCooks.Recipe.RecipeService",
	HandlerType: (*RecipeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRecipes",
			Handler:    _RecipeService_GetAllRecipes_Handler,
		},
		{
			MethodName: "GetRecipeById",
			Handler:    _RecipeService_GetRecipeById_Handler,
		},
		{
			MethodName: "AddRecipe",
			Handler:    _RecipeService_AddRecipe_Handler,
		},
		{
			MethodName: "UpdateRecipe",
			Handler:    _RecipeService_UpdateRecipe_Handler,
		},
		{
			MethodName: "DeleteRecipe",
			Handler:    _RecipeService_DeleteRecipe_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _RecipeService_UpdateStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recipe.proto",
}
